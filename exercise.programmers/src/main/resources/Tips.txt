    -------------------문자, 문자열-------------------
    #String 배열을 글자 길이순으로 정렬하기
    Arrays.sort(strArray, Comparator.comparingInt(String::length));

    # 문자열 반복하는 방법
    String originalString = "Hello ";

    # 문자열을 세 번 반복
    String repeatedString = originalString.repeat(3);

    # 문자열을 사전순으로 정렬하기
    char[] c = s.toCharArray();
    Arrays.sort(c);

    #String split할 때 빈 문자열도 포함시키기
    String[] split = s.split(" ",-1);

    s = String.valueOf(c);

    #문자열 equal 체크할 때 대소문자 구문안하기
    str.equalsIgnoreCase(tmp);

    # Char 배열로된 문자를 String으로 변환하기
    char[] c = {'a','b'};
    String.valueOf(c);

    # 문자열로된 정수를 int로 직접 변환하기
    int ans=0;

    for (char x : ss.toCharArray()){
        if(x>=48 && x<=57){
            ans = ans*10+(x-48);
        }
    }
    # 문자열 여러개 Replace 시키기
    b=b.replaceAll("ayaya|yeye|woowoo|mama"," ");

    # replaceAll할 때 정규식
    //알파벳만 남기기
    inputString.replaceAll("[^a-zA-Z]", "");
    //알파벳만 제거하기
    inputString.replaceAll("[a-zA-Z]", "");

    # 문자열에서 문자 위치 교환하기 (직접)
    // 문자 교체를 위해 문자열을 char 배열로 변환
    char[] charArray = originalString.toCharArray();

    // 인덱스 1과 3의 문자 교체
    char temp = charArray[index1];
    charArray[index1] = charArray[index2];
    charArray[index2] = temp;

    // char 배열을 다시 문자열로 변환
    String resultString = new String(charArray);

    # 문자열에서 문자 위치 교환하기 (StringBuilder)
    StringBuilder stringBuilder = new StringBuilder(originalString);

    // 인덱스 1과 3의 문자 교체
    int index1 = 1;
    int index2 = 3;


    // 문자 교체
    char charAtIndex1 = stringBuilder.charAt(index1);
    char charAtIndex2 = stringBuilder.charAt(index2);

    stringBuilder.setCharAt(index1, charAtIndex2);
    stringBuilder.setCharAt(index2, charAtIndex1);

    // 결과 출력
    String resultString = stringBuilder.toString();

    # ascii (아스키) 코드 대문자 65~90, 소문자 97~122, 숫자 48~57. 소문자와 대문자의 차이는 32임.
    # indexOf의 결과 -1: 못찾음. 나머지: 해당 인덱스 위치
    -------------------배열-------------------
    #배열 복사하기. 방법1
    int[] copy = Arrays.copyOf(arr, arr.length);

    #배열 복사하기. 방법2
    int[] tmp = arr.clone();

    -------------------타입 변환-------------------
    #char에 저장된 숫자를 int 숫자로 변경하기
     char b = '5';
     int a = b-48;
    #int에 저장된 숫자를 char로 변환하기
    (char)(a+48)
    -------------------진법 변환-------------------
    #3진법으로 변환하기
    StringBuilder sb = new StringBuilder();

    while(n>0){
        sb.insert(0, n%3);
        n/=3;
    }

    String str = sb.toString();

    #2진수 1의 개수 세는 법
    Integer.bitCount(n);

    #2진수 문자열을 정수로 변환하기
    Integer.parseInt(tmp,2);


    -------------------연산-------------------    
    # list 내부의 원소 합계 구하기
    list.stream().mapToInt(Integer::intValue).sum();

    # 각자의 배열 순회하면서 일치하는 것 찾기
    while (xcur < xlen && ycur < ylen) {
      if(x[xcur] == y[ycur]){
        sb.append(x[xcur]);
        xcur++;
        ycur++;
      } else if (x[xcur] > y[ycur]) {
        ycur++;
      } else if (x[xcur] < y[ycur]) {
        xcur++;
      }
    }

    #최대공약수 구하기
    private static int findGCD(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    #최소공배수 구하기
    public static void main(String[] args) {
        int num1 = 24;
        int num2 = 36;

        int lcm = findLCM(num1, num2);

        System.out.println("최소공배수: " + lcm);
    }

    private static int findLCM(int a, int b) {
        return (a * b) / findGCD(a, b);
    }

    private static int findGCD(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    # 1~n까지 약수의 개수 효율적으로 구하기    
    public int solution(int number, int limit, int power) {
        int[] count = new int[number + 1];
        for (int i = 1; i <= number; i++) {
            for (int j = 1; j <= number / i; j++) {
                count[i * j]++;
            }
        }
        return 1;
    }
    #n의 약수 모든 합계 구하기
        int answer = 0;
    for(int i =1 ; i<=num/2;i++){
      if(num%i==0){
        answer+=i;}}
        return answer+num;

    #1~N까지의 소수 개수구하기 (에라토스테네스체)
    int answer = 0;
    int[] ch = new int[n+1];
    for (int i = 2; i <= n; i++) {
      if(ch[i] == 0 ){
        answer++;
        for(int j=i;j<=n;j=j+i) ch[j] = 1;
      }
    }

    return answer;
    #char 문자열 순회하기
    String answer = "";

    for (Character c : s.toCharArray()) {
      if(c != ' '){
        if (Character.isLowerCase(c)) {
          answer+=(char) ((c - 'a' + n) % 26 + 'a');
        }else{
          answer += (char) ((c - 'A' + n) % 26 + 'A');
        }

      }else{
        answer += Character.toString(c);
      }
    }

    #시간을 분으로 바꾸기
    private static int getMinutes(String time){
        int result = 0;

        String[] split = time.split(":");
        int hour = Integer.parseInt(split[0]);
        int minute = Integer.parseInt(split[1]);

        return hour * 60 + minute;
    }
    # 정수 각 자리를 덧셈하는 방법
                while(x!=0){
                    sum+=x%10;
                    x/=10;
                }
    #정수 배열의 최소값 찾기
    int min = Arrays.stream(arr).min().getAsInt();

    #정수 배열에서 원하는 숫자 필터링하고 배열로 변환하기
    int[] answer = Arrays.stream(arr)
        .filter(n -> n != min)
        .toArray();

    #정수를 뒤집기
    int tmp = arr[i];
    int res = 0;
    while(tmp>0){
        int t = tmp%10;
        res=res*10+t;
        tmp=tmp/10;
    }

    #정수의 각 자리수 더하기
    int answer = 0;

    while(n != 0){
      answer += n%10;
      n=n/10;
    }
    return answer;

    #소수인지 판단하는 함수
        public static boolean isPrimeNumber(int n) {
            if (n <= 1) {
                return false; // 1은 소수가 아님
            }

            for (int i = 2; i <= Math.sqrt(n); i++) {
                if (n % i == 0) {
                    return false; // n이 i로 나누어떨어지면 소수가 아님
                }
            }

            return true; // 위의 조건을 모두 통과하면 소수
        }
    #two pointer로 합계 확인하기. (최대길이 연속부분 수열)
            int sum =0;
            for(int rt =0;rt<n;rt++){
                sum+=d[rt];
                if(sum==budget){
                    answer = Math.max(rt - lt + 1, answer);
                }
                while(sum>=budget){
                    sum-=d[lt++];
                    if(sum==budget){
                        answer = Math.max(rt - lt + 1, answer);
                    }
                }
            }
    #two pointer로 밀고나가기
    int lt = 0;
    int rt = b.length();

    for (;rt < a.length(); rt++) {
        if(map1.equals(map2)){
            answer++;
        }
        map1.put(a.charAt(rt),map1.getOrDefault(a.charAt(rt),0)+1);
        map1.put(a.charAt(lt),map1.getOrDefault(a.charAt(lt),0)-1);
        if(map1.get(a.charAt(lt)) == 0){
            map1.remove(a.charAt(lt));
        }
        lt++;

    }
    # 연속된 자연수의 합
    int answer = 0;

    int[] arr = new int[n];
    for (int i = 0; i < n; i++) {
        arr[i] = i+1;
    }

    int lt=0;
    int sum =0;

    for(int rt=0;rt<n/2+1;rt++){
        sum+=arr[rt];
        if(sum==n){
            answer++;
        }
        while(sum>=n){
            sum-=arr[lt++];
            if(sum==n){
                answer++;
            }
        }
    }

    return answer;

    #피보나치 수열 구하기
    public static int[] solution(int n){
        int answer = 0;
        int[] arr = new int[n];

        arr[0] = arr[1] = 1;

        for (int i = 2; i < n; i++) {
            arr[i] = arr[i-2] + arr[i-1];
        }

        return arr;
    }

    #배열의 합계 구하기
    Arrays.stream(result).sum();
    -------------------정렬-------------------
    #버블정렬 (O^2)
      static int[] solution(int n,int[] arr){

        for(int i=0;i<n;i++){
          for(int j=0;j<n-1-i;j++){
            if(arr[j] > arr[j+1]){
              int tmp = arr[j];
              arr[j] = arr[j+1];
              arr[j+1] = tmp;
            }
          }

        }

        return arr;
      }

    #삽입정렬 (O^2)
      static int[] solution(int n, int[] arr) {

        for (int i = 1; i < n; i++) {
          int j;
          int tmp = arr[i];
          for (j = i - 1; j >= 0; j--) {
            if (arr[j] > tmp) {
              arr[j + 1] = arr[j];
            } else {
              break;
            }
          }
          arr[j + 1] = tmp;
        }

        return arr;
      }

    #선택정렬 (O^2)
      static int[] solution(int n, int[] arr) {

        for(int i=0;i<n;i++){
          int idx = i;
          for(int j=i+1;j<n;j++){
            if(arr[j] < arr[i]){
              idx = j;
            }
          }
          int tmp = arr[i];
          arr[i] = arr[idx];
          arr[idx] = tmp;
        }

        return arr;
      }

    -------------------변환-------------------
    #int배열을 Integer 배열로 변환하기 + Integer 배열을 내림차순으로 정렬하기

    Integer[] integerArray = Arrays.stream(score)
            .boxed()
            .toArray(Integer[]::new);
    #내림차순 정렬
    Arrays.sort(score,Comparator.reverseOrder());

    #list를 int 배열로 변환하기
    integerList.stream().mapToInt(Integer::intValue).toArray();

    #Set을 int 배열로 변환하기
    set.stream().mapToInt(Integer::intValue).toArray()

    #List정렬할 때 compare 직접 지정하기
    List<String> res = new ArrayList<>();
    res.sort((a, b) -> a.compareTo(b));

    # list를 Integer[] 배열로 바꾸고, 그걸 다시 int[] 배열로 변환하기
    answer = Arrays.stream(list.toArray(new Integer[0])).mapToInt(Integer::intValue).toArray();

    # list의 내부 값 변경 후 String 배열로 돌려주기
        String[] answer = list.stream()
            .map(s -> s.substring(1))
            .toArray(String[]::new);

    #char를 String에 넣을 때 문자로 변환해서 넣기
    Character.toString(c+n);

    #Character 리스트(list)를 String으로 변환하기
    String resultString = list.stream()
        .map(String::valueOf)
        .collect(Collectors.joining());


    -------------------List, Stack,Map, Set, Hash, Queue-------------------
    #List에서 최대값 구하기
    Collections.max(list);

   # HashMap에서 최대값 찾기
    private static int findMaxValue(Map<String, Integer> map) {
        return map.values()
                .stream()
                .mapToInt(Integer::intValue)
                .max()
                .orElse(0);
    }

    # HashMap에서 최대값을 가진 키(들) 찾기
    private static Set<String> findKeysByMaxValue(Map<String, Integer> map, int maxValue) {
        return map.entrySet()
                .stream()
                .filter(entry -> entry.getValue() == maxValue)
                .map(Map.Entry::getKey)
                .collect(java.util.stream.Collectors.toSet());
    }
    #Set에서 교집합만 남기는 방법. a에서 b와의 교집합만 남긴다
    Set<String> a;
    Set<String> b;
    a.retainAll(b);

    #stack의 값 get으로 꺼내기
    for(int i=0;i<stack.size();i++){
        answer+=stack.get(i);
    }
    #후위식 계산하기
    public static int solution(String str) {
        int answer = 0;

        Stack<Integer> stack = new Stack<>();


        for (Character c : str.toCharArray()) {
            if(c=='+' || c=='*' || c=='-' || c=='/'){
                int b = stack.pop();
                int a = stack.pop();

                if(c=='+'){
                    stack.push(a+b);
                }else if(c=='*'){
                    stack.push(a*b);
                }else if(c=='-'){
                    stack.push(a-b);
                }else {
                    stack.push(a/b);
                }

            }else{
                stack.push(c-48);
            }

        }

        return stack.pop();
    }
# 우선순위 큐 내림차순 정렬방법
Queue<Integer> queue = new PriorityQueue<>(Comparator.reverseOrder());
-------------------BFS-------------------
#BFS 구현
static class Point{
        int x;
        int y;

        int depth;

        public Point(int x, int y,int depth) {
            this.x = x;
            this.y = y;
            this.depth = depth;
        }
    }



    public static int solution(String[] board) {
        int answer = 0;

        int x=0;
        int y=0;
        int tx=0;
        int ty=0;
        int row = board.length;
        int col = board[0].length();
        int[][] iBoard = new int[row][col];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length(); j++) {
                if(board[i].charAt(j) == 'R'){
                    x = i;
                    y = j;
                }
                else if(board[i].charAt(j) == 'G'){
                    tx = i;
                    ty = j;
                }

                if(board[i].charAt(j)=='.'){
                    iBoard[i][j] = 0;
                }else if(board[i].charAt(j) == 'D'){
                    iBoard[i][j] = 2;
                }
            }
        }

        iBoard[x][y] = 1;
        answer = BFS(x,y,tx,ty,iBoard);
        return answer;
    }

    private static int BFS(int x,int y,int tx,int ty,int[][] board){
        int[] dx = {-1,1,0,0};
        int[] dy = {0,0,-1,1};

        int row = board.length;
        int col = board[0].length;
        int[][] rBoard = new int[row][col];


        Queue<Point> queue = new LinkedList<>();
        Stack<Point> stack = new Stack<>();
        queue.offer(new Point(x,y,0));

        while(!queue.isEmpty()){
            Point p = queue.poll();

            if(p.x == tx && p.y == ty){
                return p.depth;
            }
            for (int i = 0; i < 4; i++) {
                int nx = p.x;
                int ny = p.y;

                while(nx >= 0 && nx < row && ny >= 0 && ny < col && board[nx][ny] != 2){
                    nx+=dx[i];
                    ny+=dy[i];
                }

                nx-=dx[i];
                ny-=dy[i];

                if(board[nx][ny] == 1) continue;

                board[nx][ny] = 1;
                queue.offer(new Point(nx,ny,p.depth+1));
            }

        }


        return -1;
    }

-------------------조합-------------------
   #조합의 수 효율적으로 구하기 (nCr)
       private static int calculateCombination(int n, int r) {
           int[][] dp = new int[n + 1][r + 1];

           // 초기값 설정
           for (int i = 0; i <= n; i++) {
               dp[i][0] = 1;
           }

           // 동적 계획법으로 조합의 수 계산
           for (int i = 1; i <= n; i++) {
               for (int j = 1; j <= Math.min(i, r); j++) {
                   dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
               }
           }

           return dp[n][r];
       }
    # 가능한 조합 만들기
    List<List<String>> combinations = new ArrayList<>();
                generateCombinations(lists, 0, new ArrayList<>(), combinations);
        private static void generateCombinations(List<List<String>> lists, int depth,
                                                 List<String> currentCombination, List<List<String>> combinations) {
            if (depth == lists.size()) {
                combinations.add(new ArrayList<>(currentCombination));
                return;
            }

            List<String> currentList = lists.get(depth);

            for (String element : currentList) {
                currentCombination.add(element);
                generateCombinations(size, lists, depth + 1, currentCombination, combinations);
                currentCombination.remove(currentCombination.size() - 1);
            }
        }

